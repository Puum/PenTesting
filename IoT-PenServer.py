from flask import Flask, request
import json
import requests
import xml.etree.ElementTree as ET
from flask_cors import CORS
import os

from IoT_PenClient import Client

app = Flask(__name__)
cors = CORS(app)

ip_adresses = ""
folder_path = 'RawScans\\'


@app.route('/api/data', methods=['POST'])
def receive_data():
    data = request.get_data()
    print("Received data:", data)
    return "Data received successfully"


@app.route('/api/ips', methods=['POST'])
def receive_ipAdress():
    ip_adresses = request.get_data()
    print("----------------------------------------")
    test = ip_adresses.decode("utf-8")
    test = test.replace('"', '')
    print(test)
    result = []
    if ',' in test:
        result = test.split(',')
        for ip in result:
            startClient(ip)

    else:
        startClient(test)

    return "Data received successfully"


def startClient(ip):
    client = Client(ip)
    client.install_nmap()
    client.run_nmap_scan("RawScans\\" + ip + ".xml")
    client.send_xml_file_to_server("http://localhost:5000/api/data", "RawScans\\" + ip + ".xml")


@app.route('/api/json', methods=['GET'])
def sendJson():
    files = os.listdir("FinishScans/")
    data = []
    if len(files) > 0:
        for element in files:
            with open("FinishScans/" + element, "r") as json_File:
                data.append(json.load(json_File))
    return data


def getCVETag(xml_file):
    # Parse the XML file
    tree = ET.parse(xml_file)
    root = tree.getroot()

    # List to store the strings between tags
    CVE = []

    # Find all "elem" tags in the XML tree
    elems = root.findall(".//elem")

    # Traverse each "elem" tag and get the text content
    for elem in elems:
        if "key" in elem.attrib and elem.attrib["key"] == "id":
            text = elem.text
            if text is not None:
                CVE.append(text.strip())
        else:
            return CVE


    return CVE


def save_json_to_file(json_data, filename):
    # Open the file in write mode
    with open(filename, 'w') as json_file:
        # Write the JSON data to the file
        json.dump(json_data, json_file)


def get_cve_details(cve_numbers,ip):
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0/"
    results = []

    for cve_number in cve_numbers:
        url = f"{base_url}?cveID={cve_number}"
        response = requests.get(url)
        if response.status_code == 200:
            temp = response.json()
            results.append(temp["vulnerabilities"][0]["cve"]["id"])
            results.append(temp["vulnerabilities"][0]["cve"]["descriptions"][0]["value"])
            results.append(temp["vulnerabilities"][0]["cve"]["vulnStatus"])
            results.append(temp["vulnerabilities"][0]["cve"]["metrics"])
        else:
            print(f"Failed to retrieve details for CVE-{cve_number}")

    json_object = json.dumps(results)
    save_json_to_file(json_object, "FinishScans/" + ip + ".json")




def evaluateScans():
    files = os.listdir(folder_path)
    # Check if any files exist in the folder
    if len(files) > 0:
        xml_filename = folder_path + files[0]
        cve_numbers = getCVETag(xml_filename)
        ip= files[0].split(".xml")[0]
        print(cve_numbers)
        print (ip)
        get_cve_details(cve_numbers, ip)
        deleteXML(files[0])


def deleteXML(xml_filename):
    if os.path.exists(folder_path):
        # Delete the file
        os.remove(folder_path + xml_filename)
        print("File deleted successfully.")
    else:
        print("File does not exist.")

evaluateScans()